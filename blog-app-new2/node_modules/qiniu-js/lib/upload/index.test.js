"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));

var _iterator = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol/iterator"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _index = require("../api/index.mock");

var _utils = require("../utils");

var _2 = _interopRequireDefault(require("."));

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = _promise["default"]))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof _symbol["default"] === "function" && (g[_iterator["default"]] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof _symbol["default"] === "function" && _iterator["default"],
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

var mockApi = new _index.MockApi();
jest.mock('../api', function () {
  return mockApi;
}); // eslint-disable-next-line import/first

var testToken = 'lVgtk5xr03Oz_uvkzDtQ8LtpiEUWx5tGEDUZVg1y:rAwZ6rnPQbjyG6Pzkx4PORzn6C8=:eyJyZXR1cm5Cb2R5Ijoie1wia2V5XCI6ICQoa2V5KX0iLCJzY29wZSI6InFpbml1LWRhcnQtc2RrIiwiZGVhZGxpbmUiOjE2MTkzNjA0Mzh9';

function mockFile(size, name, type) {
  if (size === void 0) {
    size = 4;
  }

  if (name === void 0) {
    name = 'mock.jpg';
  }

  if (type === void 0) {
    type = 'image/jpg';
  }

  if (size >= 1024) throw new Error('the size is set too large.');
  var blob = new Blob(['1'.repeat(size * _utils.MB)], {
    type: type
  });
  return new File([blob], name);
}

function observablePromisify(observable) {
  return new _promise["default"](function (resolve, reject) {
    observable.subscribe({
      error: reject,
      complete: resolve
    });
  });
}

var File3M = mockFile(3);
var File4M = mockFile(4);
var File5M = mockFile(5);
describe('test upload', function () {
  beforeEach(function () {
    localStorage.clear(); // 清理缓存

    mockApi.clearInterceptor();
  });
  test('base Direct.', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var result1, _a, _b, result2, _c, _d;

      return __generator(this, function (_e) {
        switch (_e.label) {
          case 0:
            return [4
            /*yield*/
            , observablePromisify((0, _2["default"])(File3M, null, testToken))];

          case 1:
            result1 = _e.sent();
            _b = (_a = expect(result1)).toStrictEqual;
            return [4
            /*yield*/
            , mockApi.direct()];

          case 2:
            _b.apply(_a, [_e.sent().data]);

            return [4
            /*yield*/
            , observablePromisify((0, _2["default"])(File4M, null, testToken))];

          case 3:
            result2 = _e.sent();
            _d = (_c = expect(result2)).toStrictEqual;
            return [4
            /*yield*/
            , mockApi.direct()];

          case 4:
            _d.apply(_c, [_e.sent().data]);

            return [2
            /*return*/
            ];
        }
      });
    });
  });
  test('Direct: all api error state.', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var _loop_1, _a, _b, error, e_1_1;

      var e_1, _c;

      return __generator(this, function (_d) {
        switch (_d.label) {
          case 0:
            _loop_1 = function _loop_1(error) {
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    localStorage.clear();
                    mockApi.clearInterceptor();
                    mockApi.setInterceptor('direct', function () {
                      return _promise["default"].reject(error);
                    }); // eslint-disable-next-line no-await-in-loop

                    return [4
                    /*yield*/
                    , expect(observablePromisify((0, _2["default"])(File3M, null, testToken))).rejects.toStrictEqual(error)];

                  case 1:
                    // eslint-disable-next-line no-await-in-loop
                    _a.sent();

                    return [2
                    /*return*/
                    ];
                }
              });
            };

            _d.label = 1;

          case 1:
            _d.trys.push([1, 6, 7, 8]);

            _a = __values((0, _values["default"])(_index.errorMap)), _b = _a.next();
            _d.label = 2;

          case 2:
            if (!!_b.done) return [3
            /*break*/
            , 5];
            error = _b.value;
            return [5
            /*yield**/
            , _loop_1(error)];

          case 3:
            _d.sent();

            _d.label = 4;

          case 4:
            _b = _a.next();
            return [3
            /*break*/
            , 2];

          case 5:
            return [3
            /*break*/
            , 8];

          case 6:
            e_1_1 = _d.sent();
            e_1 = {
              error: e_1_1
            };
            return [3
            /*break*/
            , 8];

          case 7:
            try {
              if (_b && !_b.done && (_c = _a["return"])) _c.call(_a);
            } finally {
              if (e_1) throw e_1.error;
            }

            return [7
            /*endfinally*/
            ];

          case 8:
            return [2
            /*return*/
            ];
        }
      });
    });
  });
  test('Resume: base.', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var result, _a, _b;

      return __generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            return [4
            /*yield*/
            , observablePromisify((0, _2["default"])(File5M, null, testToken))];

          case 1:
            result = _c.sent();
            _b = (_a = expect(result)).toStrictEqual;
            return [4
            /*yield*/
            , mockApi.uploadComplete()];

          case 2:
            _b.apply(_a, [_c.sent().data]);

            return [2
            /*return*/
            ];
        }
      });
    });
  });
  test('Resume: all api error state.', function () {
    return __awaiter(void 0, void 0, void 0, function () {
      var testApiTable, testApiTable_1, testApiTable_1_1, apiName, _loop_2, _a, _b, error, e_2_1, e_3_1;

      var e_3, _c, e_2, _d;

      return __generator(this, function (_e) {
        switch (_e.label) {
          case 0:
            testApiTable = ['getUpHosts', 'initUploadParts', 'uploadChunk', 'uploadComplete'];
            _e.label = 1;

          case 1:
            _e.trys.push([1, 12, 13, 14]);

            testApiTable_1 = __values(testApiTable), testApiTable_1_1 = testApiTable_1.next();
            _e.label = 2;

          case 2:
            if (!!testApiTable_1_1.done) return [3
            /*break*/
            , 11];
            apiName = testApiTable_1_1.value;

            _loop_2 = function _loop_2(error) {
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    localStorage.clear();
                    mockApi.clearInterceptor();
                    mockApi.setInterceptor(apiName, function () {
                      var _ = [];

                      for (var _i = 0; _i < arguments.length; _i++) {
                        _[_i] = arguments[_i];
                      }

                      return _promise["default"].reject(error);
                    }); // eslint-disable-next-line no-await-in-loop

                    return [4
                    /*yield*/
                    , expect(observablePromisify((0, _2["default"])(File5M, null, testToken))).rejects.toStrictEqual(error)];

                  case 1:
                    // eslint-disable-next-line no-await-in-loop
                    _a.sent();

                    return [2
                    /*return*/
                    ];
                }
              });
            };

            _e.label = 3;

          case 3:
            _e.trys.push([3, 8, 9, 10]);

            _a = (e_2 = void 0, __values((0, _values["default"])(_index.errorMap))), _b = _a.next();
            _e.label = 4;

          case 4:
            if (!!_b.done) return [3
            /*break*/
            , 7];
            error = _b.value;
            return [5
            /*yield**/
            , _loop_2(error)];

          case 5:
            _e.sent();

            _e.label = 6;

          case 6:
            _b = _a.next();
            return [3
            /*break*/
            , 4];

          case 7:
            return [3
            /*break*/
            , 10];

          case 8:
            e_2_1 = _e.sent();
            e_2 = {
              error: e_2_1
            };
            return [3
            /*break*/
            , 10];

          case 9:
            try {
              if (_b && !_b.done && (_d = _a["return"])) _d.call(_a);
            } finally {
              if (e_2) throw e_2.error;
            }

            return [7
            /*endfinally*/
            ];

          case 10:
            testApiTable_1_1 = testApiTable_1.next();
            return [3
            /*break*/
            , 2];

          case 11:
            return [3
            /*break*/
            , 14];

          case 12:
            e_3_1 = _e.sent();
            e_3 = {
              error: e_3_1
            };
            return [3
            /*break*/
            , 14];

          case 13:
            try {
              if (testApiTable_1_1 && !testApiTable_1_1.done && (_c = testApiTable_1["return"])) _c.call(testApiTable_1);
            } finally {
              if (e_3) throw e_3.error;
            }

            return [7
            /*endfinally*/
            ];

          case 14:
            return [2
            /*return*/
            ];
        }
      });
    });
  });
});