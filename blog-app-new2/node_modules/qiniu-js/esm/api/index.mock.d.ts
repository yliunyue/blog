import { QiniuNetworkError, QiniuRequestError } from '../errors';
import * as api from '.';
export declare const errorMap: {
    networkError: QiniuNetworkError;
    invalidParams: QiniuRequestError;
    expiredToken: QiniuRequestError;
    gatewayUnavailable: QiniuRequestError;
    serviceUnavailable: QiniuRequestError;
    serviceTimeout: QiniuRequestError;
    serviceError: QiniuRequestError;
    invalidUploadId: QiniuRequestError;
};
export declare type ApiName = 'direct' | 'getUpHosts' | 'uploadChunk' | 'uploadComplete' | 'initUploadParts' | 'deleteUploadedChunks';
export declare class MockApi {
    constructor();
    private interceptorMap;
    clearInterceptor(): void;
    setInterceptor(name: 'direct', interceptor: typeof api.direct): void;
    setInterceptor(name: 'getUpHosts', interceptor: typeof api.getUpHosts): void;
    setInterceptor(name: 'uploadChunk', interceptor: typeof api.uploadChunk): void;
    setInterceptor(name: 'uploadComplete', interceptor: typeof api.uploadComplete): void;
    setInterceptor(name: 'initUploadParts', interceptor: typeof api.initUploadParts): void;
    setInterceptor(name: 'deleteUploadedChunks', interceptor: typeof api.deleteUploadedChunks): void;
    setInterceptor(name: ApiName, interceptor: any): void;
    private callInterceptor;
    direct(): ReturnType<typeof api.direct>;
    getUpHosts(): ReturnType<typeof api.getUpHosts>;
    uploadChunk(): ReturnType<typeof api.uploadChunk>;
    uploadComplete(): ReturnType<typeof api.uploadComplete>;
    initUploadParts(): ReturnType<typeof api.initUploadParts>;
    deleteUploadedChunks(): ReturnType<typeof api.deleteUploadedChunks>;
}
